"""
Ìñ•ÏÉÅÎêú Ï∞®Ìä∏ ÏãúÍ∞ÅÌôî Î™®Îìà
Í∞ÄÍ≤© Î≥ÄÎèô ÏöîÏù∏Í≥º ÏÑ§Î™ÖÏù¥ Ìè¨Ìï®Îêú Ï∞®Ìä∏ ÏÉùÏÑ±
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

from ..analysis.price_driver import PriceDriverAnalyzer, PriceMovementAnalysis
from ..analysis.technical import TechnicalAnalyzer
from ..utils.logger import get_logger

logger = get_logger(__name__)

class EnhancedChartGenerator:
    """Ìñ•ÏÉÅÎêú Ï∞®Ìä∏ ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self):
        self.price_analyzer = PriceDriverAnalyzer()
        self.technical_analyzer = TechnicalAnalyzer()
        
        # ÌïúÍ∏Ä Ìè∞Ìä∏ ÏÑ§Ï†ï
        plt.rcParams['font.family'] = ['AppleGothic', 'Malgun Gothic', 'DejaVu Sans']
        plt.rcParams['axes.unicode_minus'] = False
        
        # ÏÉâÏÉÅ ÌÖåÎßà
        self.colors = {
            'background': '#1e1e1e',
            'text': '#ffffff',
            'grid': '#404040',
            'up': '#26a69a',
            'down': '#ef5350',
            'neutral': '#90a4ae',
            'highlight': '#ffeb3b',
            'factor_bg': '#2d2d2d'
        }
    
    def create_price_analysis_chart(self, coin_id: str, price_data: pd.Series, 
                                  current_price: float, price_24h_ago: float,
                                  save_path: Optional[str] = None,
                                  fred_api_key: Optional[str] = None) -> str:
        """Í∞ÄÍ≤© Î∂ÑÏÑùÏù¥ Ìè¨Ìï®Îêú Ï¢ÖÌï© Ï∞®Ìä∏ ÏÉùÏÑ±"""
        
        logger.info(f"üìä {coin_id} Í∞ÄÍ≤© Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± Ï§ë...")
        
        # Í∞ÄÍ≤© Î≥ÄÎèô Î∂ÑÏÑù
        analysis = self.price_analyzer.analyze_price_movement(
            coin_id=coin_id,
            current_price=current_price,
            price_24h_ago=price_24h_ago,
            price_data=price_data,
            fred_api_key=fred_api_key
        )
        
        # Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞
        indicators = self.technical_analyzer.analyze_price_data(price_data)
        
        # Ï∞®Ìä∏ ÏÉùÏÑ±
        fig = plt.figure(figsize=(16, 12))
        fig.patch.set_facecolor(self.colors['background'])
        
        # Í∑∏Î¶¨Îìú ÏÑ§Ï†ï
        gs = fig.add_gridspec(4, 3, height_ratios=[3, 1, 1, 1.5], width_ratios=[2, 1, 1])
        
        # 1. Î©îÏù∏ Í∞ÄÍ≤© Ï∞®Ìä∏
        ax_main = fig.add_subplot(gs[0, :])
        self._plot_main_price_chart(ax_main, price_data, current_price, analysis)
        
        # 2. RSI Ï∞®Ìä∏
        ax_rsi = fig.add_subplot(gs[1, :])
        self._plot_rsi_chart(ax_rsi, price_data, indicators)
        
        # 3. MACD Ï∞®Ìä∏
        ax_macd = fig.add_subplot(gs[2, :])
        self._plot_macd_chart(ax_macd, price_data, indicators)
        
        # 4. Î≥ÄÎèô ÏöîÏù∏ Î∂ÑÏÑù Ìå®ÎÑê
        ax_factors = fig.add_subplot(gs[3, :])
        self._plot_factors_panel(ax_factors, analysis)
        
        # Ï†ÑÏ≤¥ Ï†úÎ™©
        title = f"üß≠ {coin_id.upper()} Í∞ÄÍ≤© Î∂ÑÏÑù ({analysis.price_change_percent:+.2f}%)"
        fig.suptitle(title, fontsize=20, color=self.colors['text'], fontweight='bold', y=0.98)
        
        # Î†àÏù¥ÏïÑÏõÉ Ï°∞Ï†ï
        plt.tight_layout()
        plt.subplots_adjust(top=0.95, hspace=0.3)
        
        # Ï†ÄÏû•
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight', 
                       facecolor=self.colors['background'], edgecolor='none')
            logger.info(f"üíæ Ï∞®Ìä∏ Ï†ÄÏû•: {save_path}")
        
        plt.show()
        return save_path or "chart_displayed"
    
    def _plot_main_price_chart(self, ax, price_data: pd.Series, current_price: float, 
                              analysis: PriceMovementAnalysis):
        """Î©îÏù∏ Í∞ÄÍ≤© Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞"""
        
        # XÏ∂ï Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏµúÍ∑º 24ÏãúÍ∞Ñ)
        times = pd.date_range(end=datetime.now(), periods=len(price_data), freq='30min')
        
        # Í∞ÄÍ≤© ÏÑ† Í∑∏Î¶¨Í∏∞
        color = self.colors['up'] if analysis.price_change_percent > 0 else self.colors['down']
        ax.plot(times, price_data, linewidth=2.5, color=color, alpha=0.8)
        
        # ÌòÑÏû¨ Í∞ÄÍ≤© Ìè¨Ïù∏Ìä∏ Í∞ïÏ°∞
        ax.scatter(times[-1], current_price, color=self.colors['highlight'], 
                  s=100, zorder=10, edgecolor='white', linewidth=2)
        
        # Í∞ÄÍ≤© Î≥ÄÎèô Íµ¨Í∞Ñ ÌïòÏù¥ÎùºÏù¥Ìä∏
        if abs(analysis.price_change_percent) > 5:
            ax.fill_between(times, price_data, alpha=0.2, color=color)
        
        # 24ÏãúÍ∞Ñ Ï†Ñ Í∞ÄÍ≤© ÌëúÏãú
        start_price = price_data.iloc[0]
        ax.axhline(y=start_price, color=self.colors['neutral'], 
                  linestyle='--', alpha=0.7, linewidth=1)
        
        # Í∞ÄÍ≤© Ï†ïÎ≥¥ ÌÖçÏä§Ìä∏
        price_info = f"ÌòÑÏû¨: ${current_price:,.0f}\n"
        price_info += f"24h Î≥ÄÎèô: {analysis.price_change_percent:+.2f}%\n"
        price_info += f"Î≥ÄÎèô Ïú†Ìòï: {self._get_movement_emoji(analysis.movement_type)}"
        
        ax.text(0.02, 0.98, price_info, transform=ax.transAxes, 
                fontsize=12, color=self.colors['text'], 
                bbox=dict(boxstyle='round,pad=0.5', facecolor=self.colors['factor_bg'], alpha=0.8),
                verticalalignment='top')
        
        # Ï∂ï ÏÑ§Ï†ï
        ax.set_facecolor(self.colors['background'])
        ax.tick_params(colors=self.colors['text'])
        ax.spines['bottom'].set_color(self.colors['grid'])
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_color(self.colors['grid'])
        ax.grid(True, alpha=0.3, color=self.colors['grid'])
        
        # XÏ∂ï Ìè¨Îß∑
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        ax.xaxis.set_major_locator(mdates.HourLocator(interval=4))
        
        # YÏ∂ï Î†àÏù¥Î∏î
        ax.set_ylabel('Í∞ÄÍ≤© (USD)', color=self.colors['text'], fontweight='bold')
        
        # Ï†úÎ™©
        ax.set_title('üìà Í∞ÄÍ≤© Ï∂îÏù¥ (24ÏãúÍ∞Ñ)', color=self.colors['text'], 
                    fontsize=14, fontweight='bold', pad=20)
    
    def _plot_rsi_chart(self, ax, price_data: pd.Series, indicators):
        """RSI Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞"""
        
        if not indicators or not indicators.rsi:
            ax.text(0.5, 0.5, 'RSI Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå', ha='center', va='center',
                   transform=ax.transAxes, color=self.colors['text'])
            return
        
        times = pd.date_range(end=datetime.now(), periods=len(price_data), freq='30min')
        
        # RSI Í∞í Í≥ÑÏÇ∞ (Îã®ÏàúÌôîÎêú Î≤ÑÏ†Ñ)
        rsi_values = [indicators.rsi] * len(price_data)  # Ïã§Ï†úÎ°úÎäî Ï†ÑÏ≤¥ Í∏∞Í∞Ñ RSI Í≥ÑÏÇ∞ ÌïÑÏöî
        
        # RSI ÏÑ† Í∑∏Î¶¨Í∏∞
        color = self.colors['up'] if indicators.rsi > 50 else self.colors['down']
        ax.plot(times, rsi_values, color=color, linewidth=2)
        
        # Í≥ºÎß§Ïàò/Í≥ºÎß§ÎèÑ Íµ¨Í∞Ñ ÌëúÏãú
        ax.axhline(y=70, color=self.colors['down'], linestyle='--', alpha=0.7)
        ax.axhline(y=30, color=self.colors['up'], linestyle='--', alpha=0.7)
        ax.fill_between(times, 70, 100, alpha=0.1, color=self.colors['down'])
        ax.fill_between(times, 0, 30, alpha=0.1, color=self.colors['up'])
        
        # RSI Í∞í ÌëúÏãú
        ax.text(0.02, 0.95, f'RSI: {indicators.rsi:.1f}', transform=ax.transAxes,
                fontsize=11, color=self.colors['text'], fontweight='bold')
        
        # Ï∂ï ÏÑ§Ï†ï
        ax.set_facecolor(self.colors['background'])
        ax.tick_params(colors=self.colors['text'])
        ax.set_ylim(0, 100)
        ax.set_ylabel('RSI', color=self.colors['text'])
        ax.grid(True, alpha=0.3, color=self.colors['grid'])
        
        # Ïä§ÌååÏù∏ ÏÑ§Ï†ï
        for spine in ax.spines.values():
            spine.set_color(self.colors['grid'])
    
    def _plot_macd_chart(self, ax, price_data: pd.Series, indicators):
        """MACD Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞"""
        
        if not indicators or not indicators.macd:
            ax.text(0.5, 0.5, 'MACD Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå', ha='center', va='center',
                   transform=ax.transAxes, color=self.colors['text'])
            return
        
        times = pd.date_range(end=datetime.now(), periods=len(price_data), freq='30min')
        
        # MACD Í∞í (Îã®ÏàúÌôîÎêú Î≤ÑÏ†Ñ)
        macd_values = [indicators.macd] * len(price_data)
        signal_values = [indicators.macd_signal] * len(price_data) if indicators.macd_signal else [0] * len(price_data)
        
        # MACD ÎùºÏù∏
        ax.plot(times, macd_values, color=self.colors['up'], linewidth=2, label='MACD')
        ax.plot(times, signal_values, color=self.colors['down'], linewidth=1.5, label='Signal')
        
        # ÌûàÏä§ÌÜ†Í∑∏Îû®
        histogram = [indicators.macd - (indicators.macd_signal or 0)] * len(price_data)
        colors = [self.colors['up'] if h >= 0 else self.colors['down'] for h in histogram]
        ax.bar(times, histogram, color=colors, alpha=0.6, width=0.02)
        
        # MACD Ï†ïÎ≥¥
        macd_info = f"MACD: {indicators.macd:.3f}"
        if indicators.macd_signal:
            macd_info += f"\nSignal: {indicators.macd_signal:.3f}"
        
        ax.text(0.02, 0.95, macd_info, transform=ax.transAxes,
                fontsize=11, color=self.colors['text'], fontweight='bold')
        
        # Ï∂ï ÏÑ§Ï†ï
        ax.set_facecolor(self.colors['background'])
        ax.tick_params(colors=self.colors['text'])
        ax.set_ylabel('MACD', color=self.colors['text'])
        ax.grid(True, alpha=0.3, color=self.colors['grid'])
        ax.legend(loc='upper right', facecolor=self.colors['factor_bg'], 
                 edgecolor=self.colors['grid'])
        
        # Ïä§ÌååÏù∏ ÏÑ§Ï†ï
        for spine in ax.spines.values():
            spine.set_color(self.colors['grid'])
    
    def _plot_factors_panel(self, ax, analysis: PriceMovementAnalysis):
        """Î≥ÄÎèô ÏöîÏù∏ Î∂ÑÏÑù Ìå®ÎÑê Í∑∏Î¶¨Í∏∞"""
        
        ax.set_facecolor(self.colors['background'])
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 10)
        
        # Ï∂ï Ïà®Í∏∞Í∏∞
        ax.set_xticks([])
        ax.set_yticks([])
        for spine in ax.spines.values():
            spine.set_visible(False)
        
        # Ï†úÎ™©
        ax.text(5, 9.5, 'üîç Í∞ÄÍ≤© Î≥ÄÎèô ÏöîÏù∏ Î∂ÑÏÑù', ha='center', va='top',
                fontsize=16, color=self.colors['text'], fontweight='bold')
        
        # ÏöîÏïΩ ÏÑ§Î™Ö
        summary_lines = analysis.summary.split('\n')
        y_pos = 8.5
        for line in summary_lines[:2]:  # Ï≤òÏùå 2Ï§ÑÎßå
            ax.text(5, y_pos, line, ha='center', va='top',
                   fontsize=12, color=self.colors['text'])
            y_pos -= 0.5
        
        # Ï£ºÏöî ÏöîÏù∏Îì§ ÌëúÏãú
        if analysis.primary_factors:
            y_pos = 6.5
            
            for i, factor in enumerate(analysis.primary_factors[:2]):  # ÏÉÅÏúÑ 2Í∞ú ÏöîÏù∏
                # ÏöîÏù∏ ÌÉÄÏûÖ ÏïÑÏù¥ÏΩò
                factor_icons = {
                    'technical': 'üìä',
                    'sentiment': 'üò∞', 
                    'macro': 'üåç',
                    'structural': 'üèóÔ∏è'
                }
                icon = factor_icons.get(factor.factor_type, 'üìà')
                
                # ÏòÅÌñ•ÎèÑ Î∞î
                impact_color = self.colors['up'] if factor.impact_score > 0 else self.colors['down']
                bar_width = abs(factor.impact_score) * 2  # ÏµúÎåÄ 2 Îã®ÏúÑ
                
                ax.barh(y_pos, bar_width, height=0.3, color=impact_color, alpha=0.7)
                
                # ÏöîÏù∏ ÏÑ§Î™Ö
                factor_text = f"{icon} {factor.description[:50]}..."
                ax.text(0.2, y_pos + 0.15, factor_text, va='center',
                       fontsize=10, color=self.colors['text'])
                
                # Ïã†Î¢∞ÎèÑ ÌëúÏãú
                confidence_text = f"Ïã†Î¢∞ÎèÑ: {factor.confidence:.0%}"
                ax.text(9.8, y_pos + 0.15, confidence_text, va='center', ha='right',
                       fontsize=9, color=self.colors['neutral'])
                
                y_pos -= 1.2
        
        # Ìà¨Ïûê Ï∂îÏ≤ú
        recommendation_color = self.colors['highlight']
        ax.text(5, 2, f"üí° {analysis.recommendation}", ha='center', va='center',
                fontsize=11, color=recommendation_color, fontweight='bold',
                bbox=dict(boxstyle='round,pad=0.5', facecolor=self.colors['factor_bg'], alpha=0.8))
    
    def _get_movement_emoji(self, movement_type: str) -> str:
        """Î≥ÄÎèô Ïú†ÌòïÏóê Îî∞Î•∏ Ïù¥Î™®ÏßÄ Î∞òÌôò"""
        emojis = {
            'crash': 'üí• Í∏âÎùΩ',
            'dump': 'üìâ ÌÅ∞Ìè≠ ÌïòÎùΩ',
            'normal_down': 'üìâ ÌïòÎùΩ',
            'stable': 'üí§ Ìö°Î≥¥',
            'normal_up': 'üìà ÏÉÅÏäπ',
            'pump': 'üìà ÌÅ∞Ìè≠ ÏÉÅÏäπ',
            'surge': 'üöÄ Í∏âÎì±'
        }
        return emojis.get(movement_type, 'üìä Î≥ÄÎèô')
    
    def create_simple_factor_chart(self, coin_id: str, price_change: float, 
                                 factors: List, save_path: Optional[str] = None) -> str:
        """Í∞ÑÎã®Ìïú ÏöîÏù∏ Î∂ÑÏÑù Ï∞®Ìä∏"""
        
        fig, ax = plt.subplots(figsize=(12, 8))
        fig.patch.set_facecolor(self.colors['background'])
        ax.set_facecolor(self.colors['background'])
        
        # Ï†úÎ™©
        title = f"üìä {coin_id.upper()} Í∞ÄÍ≤© Î≥ÄÎèô ÏöîÏù∏ ({price_change:+.2f}%)"
        ax.text(0.5, 0.95, title, ha='center', va='top', transform=ax.transAxes,
                fontsize=18, color=self.colors['text'], fontweight='bold')
        
        # ÏöîÏù∏Î≥Ñ ÎßâÎåÄ Í∑∏ÎûòÌîÑ
        if factors:
            factor_names = [f"{f.factor_type}" for f in factors]
            impact_scores = [f.impact_score for f in factors]
            
            colors = [self.colors['up'] if score > 0 else self.colors['down'] for score in impact_scores]
            
            bars = ax.barh(factor_names, impact_scores, color=colors, alpha=0.8)
            
            # Í∞Å ÏöîÏù∏ ÏÑ§Î™Ö Ï∂îÍ∞Ä
            for i, (bar, factor) in enumerate(zip(bars, factors)):
                ax.text(bar.get_width() + 0.01, bar.get_y() + bar.get_height()/2,
                       f"{factor.description[:40]}...",
                       va='center', fontsize=10, color=self.colors['text'])
        
        # Ï∂ï ÏÑ§Ï†ï
        ax.set_xlim(-1, 1)
        ax.set_xlabel('ÏòÅÌñ•ÎèÑ', color=self.colors['text'])
        ax.tick_params(colors=self.colors['text'])
        ax.grid(True, alpha=0.3, color=self.colors['grid'])
        
        for spine in ax.spines.values():
            spine.set_color(self.colors['grid'])
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight',
                       facecolor=self.colors['background'])
            
        plt.show()
        return save_path or "chart_displayed"

def demo_enhanced_charts():
    """Ìñ•ÏÉÅÎêú Ï∞®Ìä∏ Îç∞Î™®"""
    print("üìä Ìñ•ÏÉÅÎêú Ï∞®Ìä∏ ÏãúÍ∞ÅÌôî Îç∞Î™®")
    print("=" * 50)
    
    chart_gen = EnhancedChartGenerator()
    
    # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    np.random.seed(42)
    base_price = 45000
    price_data = pd.Series([
        base_price + np.cumsum(np.random.normal(0, 200, 48))[i] + 1000 * np.sin(i/10)
        for i in range(48)
    ])
    
    current_price = price_data.iloc[-1]
    price_24h_ago = price_data.iloc[0]
    
    print(f"ÏÉòÌîå Îç∞Ïù¥ÌÑ∞: {price_24h_ago:.0f} ‚Üí {current_price:.0f}")
    print(f"Î≥ÄÎèôÎ•†: {((current_price - price_24h_ago) / price_24h_ago * 100):+.2f}%")
    
    # Ï∞®Ìä∏ ÏÉùÏÑ±
    chart_path = chart_gen.create_price_analysis_chart(
        coin_id="bitcoin",
        price_data=price_data,
        current_price=current_price,
        price_24h_ago=price_24h_ago,
        save_path="sample_price_analysis.png"
    )
    
    print(f"‚úÖ Ï∞®Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {chart_path}")

if __name__ == "__main__":
    demo_enhanced_charts()