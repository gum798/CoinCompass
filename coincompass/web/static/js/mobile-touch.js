/**\n * Mobile touch-friendly enhancements for CoinCompass\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Detect if we're on a mobile device\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    const isTouch = 'ontouchstart' in window;\n    \n    if (isMobile || isTouch) {\n        document.body.classList.add('mobile-device');\n        initializeMobileEnhancements();\n    }\n});\n\nfunction initializeMobileEnhancements() {\n    // Enhanced button touch feedback\n    addTouchFeedback();\n    \n    // Chart swipe support\n    addChartSwipeSupport();\n    \n    // Mobile-friendly dropdowns\n    enhanceMobileDropdowns();\n    \n    // Pull-to-refresh simulation\n    addPullToRefresh();\n    \n    // Prevent iOS safari zoom on input focus\n    preventIOSZoom();\n}\n\nfunction addTouchFeedback() {\n    const buttons = document.querySelectorAll('.mobile-touch-btn, .btn');\n    \n    buttons.forEach(button => {\n        // Add touch start effect\n        button.addEventListener('touchstart', function(e) {\n            this.classList.add('btn-touched');\n        }, { passive: true });\n        \n        // Remove touch effect\n        button.addEventListener('touchend', function(e) {\n            setTimeout(() => {\n                this.classList.remove('btn-touched');\n            }, 150);\n        }, { passive: true });\n        \n        // Handle touch cancel\n        button.addEventListener('touchcancel', function(e) {\n            this.classList.remove('btn-touched');\n        }, { passive: true });\n    });\n}\n\nfunction addChartSwipeSupport() {\n    const chartContainer = document.querySelector('.chart-container');\n    if (!chartContainer) return;\n    \n    let startX = 0;\n    let startTime = 0;\n    \n    chartContainer.addEventListener('touchstart', function(e) {\n        startX = e.touches[0].clientX;\n        startTime = Date.now();\n    }, { passive: true });\n    \n    chartContainer.addEventListener('touchend', function(e) {\n        const endX = e.changedTouches[0].clientX;\n        const endTime = Date.now();\n        const deltaX = endX - startX;\n        const deltaTime = endTime - startTime;\n        \n        // Check if it's a swipe (fast horizontal movement)\n        if (Math.abs(deltaX) > 50 && deltaTime < 300) {\n            const timeControls = document.querySelector('.chart-time-controls');\n            if (timeControls) {\n                const buttons = timeControls.querySelectorAll('button, select');\n                const currentActive = timeControls.querySelector('.active, :checked');\n                \n                if (currentActive && buttons.length > 1) {\n                    const currentIndex = Array.from(buttons).indexOf(currentActive);\n                    let nextIndex;\n                    \n                    if (deltaX > 0) { // Swipe right - previous\n                        nextIndex = currentIndex > 0 ? currentIndex - 1 : buttons.length - 1;\n                    } else { // Swipe left - next\n                        nextIndex = currentIndex < buttons.length - 1 ? currentIndex + 1 : 0;\n                    }\n                    \n                    // Trigger the next button/select\n                    const nextElement = buttons[nextIndex];\n                    if (nextElement.tagName === 'BUTTON') {\n                        nextElement.click();\n                    } else if (nextElement.tagName === 'SELECT') {\n                        nextElement.focus();\n                    }\n                    \n                    // Show swipe feedback\n                    showSwipeFeedback(deltaX > 0 ? 'previous' : 'next');\n                }\n            }\n        }\n    }, { passive: true });\n}\n\nfunction enhanceMobileDropdowns() {\n    const selects = document.querySelectorAll('.form-select');\n    \n    selects.forEach(select => {\n        // Add mobile-friendly styling\n        select.classList.add('mobile-select');\n        \n        // Enhance change events with haptic feedback\n        select.addEventListener('change', function() {\n            // Trigger haptic feedback if available\n            if (navigator.vibrate) {\n                navigator.vibrate(50);\n            }\n        });\n    });\n}\n\nfunction addPullToRefresh() {\n    let startY = 0;\n    let pullDistance = 0;\n    const threshold = 100;\n    let isPulling = false;\n    \n    document.addEventListener('touchstart', function(e) {\n        if (window.scrollY === 0) {\n            startY = e.touches[0].clientY;\n        }\n    }, { passive: true });\n    \n    document.addEventListener('touchmove', function(e) {\n        if (window.scrollY === 0 && startY > 0) {\n            pullDistance = e.touches[0].clientY - startY;\n            \n            if (pullDistance > 20 && !isPulling) {\n                isPulling = true;\n                document.body.classList.add('pulling');\n            }\n            \n            if (pullDistance > threshold && isPulling) {\n                document.body.classList.add('pull-ready');\n            }\n        }\n    }, { passive: true });\n    \n    document.addEventListener('touchend', function(e) {\n        if (isPulling && pullDistance > threshold) {\n            // Trigger refresh\n            const refreshButton = document.getElementById('refresh-data');\n            if (refreshButton) {\n                refreshButton.click();\n                showToast('페이지를 새로고침하고 있습니다...', 'info');\n            }\n        }\n        \n        // Reset pull state\n        isPulling = false;\n        pullDistance = 0;\n        startY = 0;\n        document.body.classList.remove('pulling', 'pull-ready');\n    }, { passive: true });\n}\n\nfunction preventIOSZoom() {\n    // Prevent iOS zoom on input focus by using 16px font size\n    const style = document.createElement('style');\n    style.textContent = `\n        @media screen and (max-width: 768px) {\n            .form-control, .form-select, input, textarea {\n                font-size: 16px !important;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n\nfunction showSwipeFeedback(direction) {\n    const feedback = document.createElement('div');\n    feedback.className = `swipe-feedback swipe-${direction}`;\n    feedback.innerHTML = `\n        <i class=\"fas fa-chevron-${direction === 'next' ? 'right' : 'left'}\"></i>\n        <span>${direction === 'next' ? '다음' : '이전'}</span>\n    `;\n    \n    document.body.appendChild(feedback);\n    \n    // Animate and remove\n    setTimeout(() => {\n        feedback.classList.add('show');\n    }, 10);\n    \n    setTimeout(() => {\n        feedback.classList.add('hide');\n        setTimeout(() => {\n            if (feedback.parentNode) {\n                feedback.parentNode.removeChild(feedback);\n            }\n        }, 300);\n    }, 1000);\n}\n\nfunction showToast(message, type = 'info') {\n    // Use existing toast function if available, otherwise create simple toast\n    if (typeof window.showAlert === 'function') {\n        window.showAlert(message, type, 2000);\n    } else {\n        const toast = document.createElement('div');\n        toast.className = `mobile-toast toast-${type}`;\n        toast.textContent = message;\n        document.body.appendChild(toast);\n        \n        setTimeout(() => toast.classList.add('show'), 10);\n        setTimeout(() => {\n            toast.classList.add('hide');\n            setTimeout(() => toast.remove(), 300);\n        }, 2000);\n    }\n}\n\n// Add CSS for mobile enhancements\nconst mobileStyles = document.createElement('style');\nmobileStyles.textContent = `\n    /* Mobile touch feedback */\n    .btn-touched {\n        transform: scale(0.95);\n        opacity: 0.8;\n        transition: all 0.1s ease;\n    }\n    \n    /* Swipe feedback */\n    .swipe-feedback {\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: rgba(0, 0, 0, 0.7);\n        color: white;\n        padding: 12px 20px;\n        border-radius: 20px;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        opacity: 0;\n        z-index: 10000;\n        transition: all 0.3s ease;\n    }\n    \n    .swipe-feedback.show {\n        opacity: 1;\n        transform: translate(-50%, -50%) scale(1.1);\n    }\n    \n    .swipe-feedback.hide {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.9);\n    }\n    \n    /* Pull to refresh styles */\n    .mobile-device.pulling {\n        background: linear-gradient(to bottom, #e3f2fd 0px, transparent 60px);\n    }\n    \n    .mobile-device.pull-ready {\n        background: linear-gradient(to bottom, #c8e6c9 0px, transparent 60px);\n    }\n    \n    /* Mobile toast */\n    .mobile-toast {\n        position: fixed;\n        bottom: 80px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: rgba(0, 0, 0, 0.8);\n        color: white;\n        padding: 12px 20px;\n        border-radius: 20px;\n        opacity: 0;\n        z-index: 10000;\n        transition: all 0.3s ease;\n    }\n    \n    .mobile-toast.show {\n        opacity: 1;\n        transform: translateX(-50%) translateY(-10px);\n    }\n    \n    .mobile-toast.hide {\n        opacity: 0;\n        transform: translateX(-50%) translateY(10px);\n    }\n    \n    /* Enhanced touch areas */\n    @media (max-width: 768px) {\n        .mobile-device .btn {\n            min-height: 44px;\n            padding: 12px 16px;\n        }\n        \n        .mobile-device .nav-link {\n            min-height: 44px;\n            padding: 12px 16px;\n        }\n        \n        .mobile-device .form-control,\n        .mobile-device .form-select {\n            min-height: 44px;\n            padding: 12px 16px;\n        }\n        \n        .mobile-device .price-card {\n            padding: 1.5rem;\n        }\n        \n        .mobile-device .chart-time-controls {\n            overflow-x: auto;\n            -webkit-overflow-scrolling: touch;\n            scrollbar-width: none;\n            -ms-overflow-style: none;\n        }\n        \n        .mobile-device .chart-time-controls::-webkit-scrollbar {\n            display: none;\n        }\n    }\n`;\ndocument.head.appendChild(mobileStyles);